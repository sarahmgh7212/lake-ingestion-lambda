# type Query {
#   todos: [Todo] @function(name: "lakeingestionf169d28d")
#   getTodo: Todo @function(name: "lakeingestionf169d28d")
#   # listSourceTypes: [SourceType] @function(name: "lakeingestionf169d28d")
# }

type Todo {
  id: ID!
  name: String!
  description: String
}

type SourceType @model {
  id: ID!
  name: String!
  configSchema: AWSJSON
  container: String
  taskARN: String
}

type Source @model @key(name: "byTeam", fields: ["teamId"]) {
  id: ID!
  teamId: ID!
  name: String!
  config: String
  sourceType: SourceType! @connection(keyName: "bySourceType")
  team: Team! @connection(fields: ["teamId"])
}

type Job @model @key(name: "byPipe", fields: ["pipeId"]) {
  id: ID!
  pipeId: ID!
  startedAt: AWSDateTime #ex: 2018-05-09T12:50:41.337510
  initAt: AWSDateTime
  completedAt: AWSDateTime
  failedAt: AWSDateTime
  logsARN: String
  pipe: Pipe! @connection(fields: ["pipeId"])
}

type Pipe @model {
  id: ID!
  name: String
  catalog: AWSJSON
  schedule: String #cron string
  status: PipeStatus
  jobs: [Job] @connection(keyName: "byPipe", fields: ["id"])
}

enum PipeStatus {
  DISABLED
  ENABLED
}

type User @model {
  id: ID!
  name: String!
  role: UserRole!
  teams: [TeamUser] @connection(keyName: "byUser", fields: ["id"])
  invites: [Invite] @connection(keyName: "byUser", fields: ["id"])
  requestedInvites: [Invite] @connection(keyName: "byRequestor", fields: ["id"])
}
enum UserRole {
  READER
  MANAGER
  OWNER
}

type Team @model {
  id: ID!
  name: String!
  sources: [Source] @connection(keyName: "byTeam", fields: ["id"])
  users: [TeamUser] @connection(keyName: "byTeam", fields: ["id"])
  invites: [Invite] @connection(keyName: "byTeam", fields: ["id"])
}

type TeamUser
  @model
  @key(name: "byUser", fields: ["userId", "teamId"])
  @key(name: "byTeam", fields: ["teamId", "userId"]) {
  id: ID!
  teamId: ID!
  userId: ID!
  role: UserRole!
  team: Team! @connection(fields: ["teamId"])
  user: User! @connection(fields: ["userId"])
}

type Invite
  @model
  @key(name: "byUser", fields: ["userId", "teamId"])
  @key(name: "byRequestor", fields: ["requestorId", "teamId"])
  @key(name: "byTeam", fields: ["teamId"]) {
  id: ID!
  userId: ID
  teamId: ID!
  email: String!
  requestorId: ID! #difference between userId and requestorId????
  user: User @connection(fields: ["userId"])
  team: Team! @connection(fields: ["teamId"])
  # requestor: User @connection(fields: ["requestorId"]) #does not work properly(should say no such user exists) ?????
}
